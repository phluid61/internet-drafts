<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.28 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-appsawg-file-scheme-07" category="std" obsoletes="1738">

  <front>
    <title abbrev="file-scheme">The file URI Scheme</title>

    <author initials="M." surname="Kerwin" fullname="Matthew Kerwin">
      <organization abbrev="QUT">Queensland University of Technology</organization>
      <address>
        <postal>
          <street>Victoria Park Road</street>
          <city>Kelvin Grove</city>
          <region>QLD</region>
          <code>4059</code>
          <country>Australia</country>
        </postal>
        <email>matthew.kerwin@qut.edu.au</email>
      </address>
    </author>

    <date year="2016"/>

    <area>General</area>
    <workgroup>Applications Area Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies the “file” Uniform Resource Identifier (URI)
scheme, obsoleting the definition in RFC 1738.</t>

<t>It defines a common syntax which is intended to interoperate across
the broad spectrum of existing usages.  At the same time it notes
some other current practices around the use of file URIs.</t>

<t><spanx style="strong">Note to Readers (To be removed by the RFC Editor)</spanx></t>

<t>This draft should be discussed on the IETF Applications Area Working
Group discussion list &lt;apps-discuss@ietf.org&gt;.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A file URI identifies an object (a “file”) stored in a structured
object naming and accessing environment on a host (a “file system.”)
The URI can be used in discussions about the file, and if other
conditions are met it can be dereferenced to directly access the file.</t>

<t>This document specifies a syntax based on the generic syntax of
<xref target="RFC3986"/> that is compatible with most existing usages.  Optional
extensions to the syntax which might be encountered in practice are
listed in appendices;  these extensions are listed for informational
purposes only.</t>

<t>The file URI scheme is not coupled with a specific protocol, nor with a
specific media type <xref target="RFC6838"/>.  See <xref target="operations"/> for a discussion
of operations that can be performed on the object identified by a file
URI.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>Throughout this document the term “local file” is used to describe
files that can be accessed through the local file system API using only
the information included in the file path, not relying on other
information such as network addresses.  It is important to note that a
local file may not be physically located on the local machine, for
example if a networked file system is transparently mounted into the
local file system.</t>

<t>The term “local file URI” is used to describe file URIs which have
no authority, or where the authority is the special string
“localhost” (<xref target="syntax"/>).</t>

</section>
</section>
<section anchor="syntax" title="Syntax">

<t>The file URI syntax is defined here in Augmented Backus-Naur Form (ABNF)
<xref target="RFC5234"/>, including the core ABNF syntax rule <spanx style="verb">ALPHA</spanx> defined by that
specification, and importing the <spanx style="verb">host</spanx> and <spanx style="verb">path-absolute</spanx> rules from
<xref target="RFC3986"/> (as updated by <xref target="RFC6874"/>.)</t>

<t>The generic syntax in <xref target="RFC3986"/> includes <spanx style="verb">path</spanx> and <spanx style="verb">authority</spanx>
components, for each of which only a subset is used in the definition
of the file URI scheme.  The relevant subset of <spanx style="verb">path</spanx> is
<spanx style="verb">path-absolute</spanx>, and the subset of <spanx style="verb">authority</spanx> is <spanx style="verb">file-auth</spanx>, given
below.</t>

<t>The syntax definition below is different from those given in
<xref target="RFC1630"/> and <xref target="RFC1738"/> as it is derived from the generic syntax
of <xref target="RFC3986"/>, which post-dates the previous file URI specifications.
<xref target="diff"/> enumerates significant differences.</t>

<figure><artwork><![CDATA[
   file-URI       = file-scheme ":" file-hier-part

   file-scheme    = "file"

   file-hier-part = ( "//" auth-path )
                  / local-path

   auth-path      = [ file-auth ] path-absolute

   local-path     = path-absolute

   file-auth      = "localhost"
                  / host
]]></artwork></figure>

<t>As a special case, the “file-auth” rule can match the string
“localhost” which is interpreted as “the machine from which the URI is
being interpreted,” exactly as if no authority were present.  To
maximise compatibility with previous specifications, users MAY choose
to include an “auth-path” with no “file-auth” when creating a URI.</t>

<t>Some systems have case-sensitive file naming and some do not.  As such
the file scheme supports case sensitivity, in order to retain the case
as given.  Any transport-related handling of the file URI scheme MUST
retain the case as given.  Any mapping to or from a case-insensitive
form is soley the responsibility of the implementation processing the
file URI on behalf of the referenced file system.</t>

<t>Some file systems allow directory objects to be treated as files
in some cases.  This can be reflected in a file URI by omitting the
trailing slash “/” from the path.  Be aware that merging a relative URI
reference to such a base URI as per Section 5.2 of <xref target="RFC3986"/> could
remove the directory name from the resulting target URI.</t>

<t>Also see <xref target="nonstandard-syntax"/> that lists some nonstandard syntax
variations that can be encountered in practice.</t>

</section>
<section anchor="operations" title="Operations Involving file URIs">

<t>Implementations that provide dereferencing operations on file URIs
SHOULD, at a minimum, provide a read-like operation to return the
contents of a file located by a file URI.  Additional operations MAY be
provided, such as writing to, creating, and deleting files.  See the
POSIX file and directory operations <xref target="POSIX"/> for examples of
standardized operations that can be performed on files.</t>

<t>A file URI can be dependably dereferenced or translated to a local file
path only if it is local.  A file URI is considered “local” if it has
no file-auth, or the file-auth is the special string “localhost”.</t>

<t>This specification neither defines nor forbids any set of operations
that might be performed on a file identified by a non-local file URI.</t>

</section>
<section anchor="encoding" title="Encoding">

<t>The encoding of a file URI depends on the file system that stores the
identified file.  If the file system uses a known non-Unicode character
encoding, the path SHOULD be converted to a sequence of characters from
the Universal Character Set <xref target="ISO10646"/> normalized according to
Normalization Form C (NFC)  <xref target="UTR15"/>, before being translated to a
file URI, and conversely a file URI SHOULD be converted back to the
file system’s native encoding when dereferencing or translating to a
file path.</t>

<t><list style='empty'>
  <t>Note that many modern file systems encode directory and file names
as arbitrary sequences of octets.  In those cases, the representation
as an encoded string often depends on the user’s localization
settings, or defaults to UTF-8 <xref target="STD63"/>.</t>
</list></t>

<t>When the file system’s encoding is not known the file URI SHOULD be
transported as an Internationalized Resource Identifier (IRI)
<xref target="RFC3987"/> to avoid ambiguity.  See <xref target="iri-vs-uri"/> for examples.</t>

<!-- fixme: from Dave Crocker:

  I'm inclined to think that this section either needs to be far more
  complete - and I'm not recommending it do that - or it merely needs to
  caution implementers to make sure that file scheme URI storage needs to
  be idempotent with the original, interoperable form.

-->

</section>
<section anchor="security" title="Security Considerations">

<t>There are many security considerations for URI schemes discussed in
<xref target="RFC3986"/>.</t>

<t>File access and the granting of privileges for specific operations
are complex topics, and the use of file URIs can complicate the
security model in effect for file privileges.</t>

<t>Historically, user agents have granted content from the file URI
scheme a tremendous amount of privilege.  However, granting all local
files such wide privileges can lead to privilege escalation attacks.
Some user agents have had success granting local files directory-based
privileges, but this approach has not been widely adopted.  Other user
agents use globally unique identifiers as the origin for each file URI
<xref target="RFC6454"/>, which is the most secure option.</t>

<t>File systems typically assign an operational meaning to special
characters, such as the “/”, “\”, “:”, “[”, and “]” characters, and
to special device names like “.”, “..”, “…”, “aux”, “lpt”, etc.
In some cases, merely testing for the existence of such a name will
cause the operating system to pause or invoke unrelated system calls,
leading to significant security concerns regarding denial of service
and unintended data transfer.  It would be impossible for this
specification to list all such significant characters and device names.
Implementers MUST research the reserved names and characters for the
types of storage device that may be attached to their application and
restrict the use of data obtained from URI components accordingly.</t>

<!-- fixme: improve this; add encoding security concerns -->
<t>Some file systems have case-sensitive file naming and some do not.
Care must (?) be taken to avoid issues resulting from possibly
unexpected aliasing from case-only differences between file paths or
URIs.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document defines the following URI scheme, so the “Permanent
URI Schemes” registry has been updated accordingly.  This registration
complies with <xref target="BCP35"/>.</t>

<t><list style="hanging">
  <t hangText='Scheme name:'><vspace blankLines='0'/>
  file</t>
  <t hangText='Status:'><vspace blankLines='0'/>
  permanent</t>
  <t hangText='Applications/protocols that use this scheme name:'><vspace blankLines='0'/>
  Commonly used in hypertext documents to refer to files without
depending on network access.  Supported by major browsers.</t>
  <t>Windows API (PathCreateFromUrl, UrlCreateFromPath).</t>
  <t>Perl LWP.</t>
  <t hangText='Contact:'><vspace blankLines='0'/>
  Matthew Kerwin &lt;matthew.kerwin@qut.edu.au&gt;</t>
  <t hangText='Change Controller:'><vspace blankLines='0'/>
  This scheme is registered under the IETF tree.  As such, the IETF
maintains change control.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>This specification is derived from <xref target="RFC1738"/>, <xref target="RFC3986"/>, and
<xref target="I-D.hoffman-file-uri"/> (expired); the acknowledgements in
those documents still apply.</t>

<t>Additional thanks to Dave Risney, author of the informative
IE Blog article &lt;http://blogs.msdn.com/b/ie/archive/2006/12/06/file-uris-in-windows.aspx&gt;,
and Dave Thaler for their comments and suggestions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="BCP35" target="http://www.rfc-editor.org/info/bcp35">
  <front>
    <title>Guidelines and Registration Procedures for URI Schemes</title>
    <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
      <organization></organization>
    </author>
    <author initials="T." surname="Hansen" fullname="T. Hansen">
      <organization></organization>
    </author>
    <author initials="T." surname="Hardie" fullname="T. Hardie">
      <organization></organization>
    </author>
    <date year="2015" month="June"/>
  </front>
  <seriesInfo name="BCP" value="35"/>
  <seriesInfo name="RFC" value="7595"/>
  <seriesInfo name="DOI" value="10.17487/RFC7595"/>
</reference>




<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC3986' target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor='RFC3987' target='http://www.rfc-editor.org/info/rfc3987'>
<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'><organization /></author>
<author initials='M.' surname='Suignard' fullname='M. Suignard'><organization /></author>
<date year='2005' month='January' />
<abstract><t>This document defines a new protocol element, the Internationalized  Resource Identifier (IRI), as a complement of the Uniform Resource  Identifier (URI). An IRI is a sequence of characters from the  Universal Character Set (Unicode/ISO 10646). A mapping from IRIs to   URIs is defined, which means that IRIs can be used instead of URIs,  where appropriate, to identify resources.</t><t> The approach of defining a new protocol element was chosen instead of extending or changing the definition of URIs.  This was done in order  to allow a clear distinction and to avoid incompatibilities with  existing software. Guidelines are provided for the use and deployment of IRIs in various protocols, formats, and software components that currently deal with URIs.</t></abstract>
</front>
<seriesInfo name='RFC' value='3987'/>
<seriesInfo name='DOI' value='10.17487/RFC3987'/>
</reference>



<reference  anchor='RFC5234' target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor='RFC6874' target='http://www.rfc-editor.org/info/rfc6874'>
<front>
<title>Representing IPv6 Zone Identifiers in Address Literals and Uniform Resource Identifiers</title>
<author initials='B.' surname='Carpenter' fullname='B. Carpenter'><organization /></author>
<author initials='S.' surname='Cheshire' fullname='S. Cheshire'><organization /></author>
<author initials='R.' surname='Hinden' fullname='R. Hinden'><organization /></author>
<date year='2013' month='February' />
<abstract><t>This document describes how the zone identifier of an IPv6 scoped address, defined as &lt;zone_id&gt; in the IPv6 Scoped Address Architecture (RFC 4007), can be represented in a literal IPv6 address and in a Uniform Resource Identifier that includes such a literal address.  It updates the URI Generic Syntax specification (RFC 3986) accordingly.</t></abstract>
</front>
<seriesInfo name='RFC' value='6874'/>
<seriesInfo name='DOI' value='10.17487/RFC6874'/>
</reference>


<reference anchor="STD63" target="http://www.rfc-editor.org/info/std63">
  <front>
    <title>UTF-8, a transformation format of ISO 10646</title>
    <author initials="F." surname="Yergeau" fullname="F. Yergeau">
      <organization></organization>
    </author>
    <date year="2003" month="November"/>
  </front>
  <seriesInfo name="STD" value="63"/>
  <seriesInfo name="RFC" value="3629"/>
  <seriesInfo name="DOI" value="10.17487/RFC3629"/>
</reference>
<reference anchor="ISO10646" >
  <front>
    <title>Information Technology - Universal Multiple-Octet Coded Character Set (UCS)</title>
    <author >
      <organization>International Organization for Standardization</organization>
    </author>
    <date year="2003" month="December"/>
  </front>
  <seriesInfo name="ISO/IEC" value="10646:2003"/>
</reference>
<reference anchor="UTR15" target="http://unicode.org/reports/tr15/tr15-18.html">
  <front>
    <title>Unicode Normalization Forms</title>
    <author initials="M." surname="Davis" fullname="Mark Davis">
      <organization></organization>
    </author>
    <author initials="K." surname="Whistler" fullname="Ken Whistler">
      <organization></organization>
    </author>
    <date year="2012" month="August" day="31"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor='RFC1035' target='http://www.rfc-editor.org/info/rfc1035'>
<front>
<title>Domain names - implementation and specification</title>
<author initials='P.V.' surname='Mockapetris' fullname='P.V. Mockapetris'><organization /></author>
<date year='1987' month='November' />
<abstract><t>This RFC is the revised specification of the protocol and format used in the implementation of the Domain Name System.  It obsoletes RFC-883. This memo documents the details of the domain name client - server communication.</t></abstract>
</front>
<seriesInfo name='STD' value='13'/>
<seriesInfo name='RFC' value='1035'/>
<seriesInfo name='DOI' value='10.17487/RFC1035'/>
</reference>



<reference  anchor='RFC1123' target='http://www.rfc-editor.org/info/rfc1123'>
<front>
<title>Requirements for Internet Hosts - Application and Support</title>
<author initials='R.' surname='Braden' fullname='R. Braden' role='editor'><organization /></author>
<date year='1989' month='October' />
<abstract><t>This RFC is an official specification for the Internet community.  It incorporates by reference, amends, corrects, and supplements the primary protocol standards documents relating to hosts.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='3'/>
<seriesInfo name='RFC' value='1123'/>
<seriesInfo name='DOI' value='10.17487/RFC1123'/>
</reference>



<reference  anchor='RFC1630' target='http://www.rfc-editor.org/info/rfc1630'>
<front>
<title>Universal Resource Identifiers in WWW: A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World-Wide Web</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<date year='1994' month='June' />
<abstract><t>This document defines the syntax used by the World-Wide Web initiative to encode the names and addresses of objects on the Internet.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1630'/>
<seriesInfo name='DOI' value='10.17487/RFC1630'/>
</reference>



<reference  anchor='RFC1738' target='http://www.rfc-editor.org/info/rfc1738'>
<front>
<title>Uniform Resource Locators (URL)</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='M.' surname='McCahill' fullname='M. McCahill'><organization /></author>
<date year='1994' month='December' />
<abstract><t>This document specifies a Uniform Resource Locator (URL), the syntax and semantics of formalized information for location and access of resources via the Internet. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1738'/>
<seriesInfo name='DOI' value='10.17487/RFC1738'/>
</reference>



<reference  anchor='RFC4291' target='http://www.rfc-editor.org/info/rfc4291'>
<front>
<title>IP Version 6 Addressing Architecture</title>
<author initials='R.' surname='Hinden' fullname='R. Hinden'><organization /></author>
<author initials='S.' surname='Deering' fullname='S. Deering'><organization /></author>
<date year='2006' month='February' />
<abstract><t>This specification defines the addressing architecture of the IP Version 6 (IPv6) protocol.  The document includes the IPv6 addressing model, text representations of IPv6 addresses, definition of IPv6 unicast addresses, anycast addresses, and multicast addresses, and an IPv6 node's required addresses.</t><t>This document obsoletes RFC 3513, &quot;IP Version 6 Addressing Architecture&quot;.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4291'/>
<seriesInfo name='DOI' value='10.17487/RFC4291'/>
</reference>



<reference  anchor='RFC6454' target='http://www.rfc-editor.org/info/rfc6454'>
<front>
<title>The Web Origin Concept</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='December' />
<abstract><t>This document defines the concept of an &quot;origin&quot;, which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named &quot;Origin&quot;, that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6454'/>
<seriesInfo name='DOI' value='10.17487/RFC6454'/>
</reference>



<reference  anchor='RFC6838' target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor='RFC7530' target='http://www.rfc-editor.org/info/rfc7530'>
<front>
<title>Network File System (NFS) Version 4 Protocol</title>
<author initials='T.' surname='Haynes' fullname='T. Haynes' role='editor'><organization /></author>
<author initials='D.' surname='Noveck' fullname='D. Noveck' role='editor'><organization /></author>
<date year='2015' month='March' />
<abstract><t>The Network File System (NFS) version 4 protocol is a distributed file system protocol that builds on the heritage of NFS protocol version 2 (RFC 1094) and version 3 (RFC 1813).  Unlike earlier versions, the NFS version 4 protocol supports traditional file access while integrating support for file locking and the MOUNT protocol. In addition, support for strong security (and its negotiation), COMPOUND operations, client caching, and internationalization has been added.  Of course, attention has been applied to making NFS version 4 operate well in an Internet environment.</t><t>This document, together with the companion External Data Representation (XDR) description document, RFC 7531, obsoletes RFC 3530 as the definition of the NFS version 4 protocol.</t></abstract>
</front>
<seriesInfo name='RFC' value='7530'/>
<seriesInfo name='DOI' value='10.17487/RFC7530'/>
</reference>



<reference anchor='I-D.hoffman-file-uri'>
<front>
<title>The file URI Scheme</title>

<author initials='P' surname='Hoffman' fullname='Paul Hoffman'>
    <organization />
</author>

<date month='January' day='3' year='2005' />

<abstract><t>This document specifies the file: Uniform Resource Identifier (URI) scheme that was originally specified in RFC 1738. The purpose of this document is to allow RFC 1738 to be moved to historic while keeping the information about the scheme on standards track.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hoffman-file-uri-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hoffman-file-uri-03.txt' />
</reference>


<reference anchor="WHATWG-URL" target="http://url.spec.whatwg.org/">
  <front>
    <title>URL Living Standard</title>
    <author >
      <organization>WHATWG</organization>
    </author>
    <date year="2013" month="May"/>
  </front>
</reference>
<reference anchor="MS-DTYP" target="http://msdn.microsoft.com/en-us/library/gg465305.aspx">
  <front>
    <title>Windows Data Types, 2.2.56 UNC</title>
    <author >
      <organization>Microsoft Open Specifications</organization>
    </author>
    <date year="2013" month="January"/>
  </front>
</reference>
<reference anchor="MS-NBTE" target="http://msdn.microsoft.com/en-us/library/dd891412.aspx">
  <front>
    <title>NetBIOS over TCP (NBT) Extensions</title>
    <author >
      <organization>Microsoft Open Specifications</organization>
    </author>
    <date year="2014" month="May"/>
  </front>
</reference>
<reference anchor="MS-SMB" target="http://msdn.microsoft.com/en-us/library/cc246231.aspx">
  <front>
    <title>Server Message Block (SMB) Protocol</title>
    <author >
      <organization>Microsoft Open Specifications</organization>
    </author>
    <date year="2013" month="January"/>
  </front>
</reference>
<reference anchor="NOVELL" target="http://www.novell.com/developer/ndk/netware_core_protocols.html">
  <front>
    <title>NetWare Core Protocols</title>
    <author >
      <organization>Novell</organization>
    </author>
    <date year="2013"/>
  </front>
</reference>
<reference anchor="POSIX" >
  <front>
    <title>IEEE Std 1003.1, 2013 Edition</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2013"/>
  </front>
</reference>
<reference anchor="Win32-Namespaces" target="https://msdn.microsoft.com/en-au/library/windows/desktop/aa365247(v=vs.85).aspx">
  <front>
    <title>Naming Files, Paths, and Namespaces</title>
    <author >
      <organization>Microsoft Developer Network</organization>
    </author>
    <date year="2013" month="June"/>
  </front>
</reference>
<reference anchor="Bug107540" target="https://bugzilla.mozilla.org/show_bug.cgi?id=107540">
  <front>
    <title>Bug 107540</title>
    <author >
      <organization>Bugzilla@Mozilla</organization>
    </author>
    <date year="2007" month="October"/>
  </front>
</reference>


    </references>


<section anchor="diff" title="Differences from Previous Specifications">

<t>According to the definition in <xref target="RFC1738"/> a file URL always started
with the token “file://”, followed by an (optionally blank) host name
and a “/”.  The syntax given in <xref target="syntax"/> makes the entire authority
component, including the double slashes “//”, optional.</t>

<t>Additionally, the definition in <xref target="RFC1738"/> did not include any user
information in the authority.  <!-- fixme: is this staying? --></t>

</section>
<section anchor="examples" title="Example URIs">

<t>The syntax in <xref target="syntax"/> is intended to support file URIs that take the
following forms:</t>

<t>Local files:</t>

<t><list style="symbols">
  <t>A traditional file URI for a local file, with an empty authority.
This is the most common format in use today. E.g.:  <list style="symbols">
      <t><spanx style="verb">file:///path/to/file</spanx></t>
    </list></t>
  <t>The minimal representation of a local file, with no authority field
and an absolute path that begins with a slash “/”. E.g.:  <list style="symbols">
      <t><spanx style="verb">file:/path/to/file</spanx></t>
    </list></t>
</list></t>

<t>Non-local files:</t>

<t><list style="symbols">
  <t>A non-local file, with an explicit authority. E.g.:  <list style="symbols">
      <t><spanx style="verb">file://host.example.com/path/to/file</spanx></t>
    </list></t>
</list></t>

</section>
<section anchor="similar-technologies" title="Similar Technologies">

<t><list style="symbols">
  <t>The WHATWG defines a living URL standard <xref target="WHATWG-URL"/>, which
includes algorithms for interpreting file URIs (as URLs).</t>
  <t>The Universal Naming Convention (UNC) <xref target="MS-DTYP"/> defines a string
format that can perform a similar role to the file URI scheme in
describing the location of files, except that files located by UNC
filespace selector strings are typically stored on a remote machine
and accessed using a network protocol.  A UNC filespace selector
string has three parts: host, share, and path; described for
informational purposes in <xref target="unc-syntax"/>.  <xref target="ext-unc"/> lists some
ways in which UNC filespace selector strings are currently made to
interoperate with the file URI scheme.</t>
  <t>The Microsoft Windows API defines Win32 Namespaces
<xref target="Win32-Namespaces"/> for interacting with files and devices using
Windows API functions.  These namespaced paths are prefixed by
“\\?\” for Win32 File Namespaces and “\\.\” for Win32 Device
Namespaces.  There is also a special case for UNC file paths in Win32
File Namespaces, referred to as “Long UNC”, using the prefix
“\\?\UNC\”.  This specification does not define a mechanism for
translating namespaced paths to or from file URIs.</t>
</list></t>

</section>
<section anchor="system-specific" title="System-specific Operations">

<t>This appendix is not normative; it highlights some observed
behaviours and provides system-specific guidance for interacting
with file URIs and paths.</t>

<section anchor="sys-unix" title="POSIX Systems">

<t>There is little to say about POSIX file systems; the file URI structure
already closely resembles POSIX file paths.</t>

</section>
<section anchor="sys-dos" title="DOS- and Windows-Like Systems">

<t>When mapping a DOS- or Windows-like file path to a file URI, the drive
letter (e.g. “c:”) is typically mapped into the first path segment.</t>

<t>See <xref target="nonstandard-syntax"/> for some explicit (but non-normative and
strictly optional) rules for interacting with DOS- or Windows-like file
paths and URIs.</t>

</section>
<section anchor="sys-osx" title="Mac OS X Systems">

<t>The HFS+ file system uses a non-standard normalization form, similar
to Normalization Form D.  Take care when transforming HFS+ file paths
to and from URIs using Normalization Form C (<xref target="encoding"/>).</t>

</section>
<section anchor="sys-vms" title="OpenVMS Files-11 Systems">

<t>When mapping a VMS file path to a file URI, the device name is mapped
into the first path segment.  Note that the dollars sign “$” is
a reserved character per the definition in <xref target="RFC3986"/>, Section 2.2,
so should be percent-encoded if present in the device name.</t>

<t>If the VMS file path includes a node reference, that is used as the
authority.  Where the original node reference includes a username and
password in an access control string, they can be transcribed into the
userinfo field of the authority if present (see <xref target="ext-userinfo"/>).</t>

</section>
</section>
<section anchor="nonstandard-syntax" title="Nonstandard Syntax Variations">

<t>These variations may be encountered by existing usages of the file URI
scheme, but are not supported by the normative syntax of <xref target="syntax"/>.</t>

<t>This appendix is not normative.</t>

<section anchor="ext-userinfo" title="User Information">

<t>It might be necessary to include user information such as a username in
a file URI, for example when mapping a VMS file path with a node
reference that includes the username.</t>

<t>To allow user information to be included in a file URI, the <spanx style="verb">file-auth</spanx>
rule in <xref target="syntax"/> can be replaced with the following:</t>

<figure><artwork><![CDATA[
   file-auth      = "localhost"
                  / [ userinfo "@" ] host
]]></artwork></figure>

<t>This uses the <spanx style="verb">userinfo</spanx> rule from <xref target="RFC3986"/>.</t>

<t>As discussed in the HP OpenVMS Systems Documentation
&lt;http://h71000.www7.hp.com/doc/84final/ba554_90015/ch03s09.html&gt;
“access control strings include sufficient information to allow someone
to break in to the remote account, [therefore] they create serious
security exposure.” In a similar vein, the presence of a password in a
“user:password” userinfo field is deprecated by <xref target="RFC3986"/>.  As such,
the userinfo field of a file URI, if present, MUST NOT (?) contain a
password. <!-- fixme --></t>

</section>
<section anchor="ext-drives" title="DOS and Windows Drive Letters">

<t>On Windows- or DOS-based file systems an absolute file path can begin
with a drive letter.  To facilitate this, the <spanx style="verb">local-path</spanx> rule in
<xref target="syntax"/> can be replaced with the following:</t>

<figure><artwork><![CDATA[
   local-path     = [ drive-letter ] path-absolute

   drive-letter   = ALPHA ":"
]]></artwork></figure>

<t>This is intended to support the minimal representation of a local file
in a DOS- or Windows-based environment, with no authority field and an
absolute path that begins with a drive letter.  E.g.:</t>

<t><list style="symbols">
  <t><spanx style="verb">file:c:/path/to/file</spanx></t>
</list></t>

<t>URIs of the form <spanx style="verb">file:///c:/path/to/file</spanx> are already supported by the
<spanx style="verb">path-absolute</spanx> rule.</t>

<t>Note that comparison of drive letters in DOS or Windows file paths
is case-insensitive, some usages of file URIs therefore canonicalize
drive letters by converting them to uppercase.</t>

<section anchor="ext-relative" title="Relative Paths">

<t>To mimic the behaviour of DOS- or Windows-based file systems, relative
paths beginning with a slash “/” can be resolved relative to the drive
letter, when present, and resolution of “..” dot segments (per Section
5.2.4 of <xref target="RFC3986"/>) can be modified to not ever overwrite the drive
letter.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
   base:       file:///c:/path/to/file.txt
   rel. URI:   /some/other/thing.bmp
   resolved:   file:///c:/some/other/thing.bmp

   base:       file:///c:/foo.txt
   rel. URI:   ../../bar.txt
   resolved:   file:///c:/bar.txt
]]></artwork></figure>

<t>Relative paths with a drive letter followed by a character other than
a slash (e.g. “c:bar/baz.txt” or “c:../foo.txt”) might not be
accepted as dereferenceable URIs in DOS or Windows systems.</t>

</section>
<section anchor="ext-pipe" title="Vertical Bar Character">

<t>Historically some usages of file URIs have included a vertical line
character “|” instead of a colon “:” in the drive letter construct.
<xref target="RFC3986"/> forbids the use of the vertical line, however it may be
necessary to interpret or update old URIs.</t>

<t>For interpreting such URIs, the <spanx style="verb">auth-path</spanx> and <spanx style="verb">local-path</spanx> rules in
<xref target="syntax"/> and the <spanx style="verb">drive-letter</spanx> rule above can be replaced with the
following:</t>

<figure><artwork><![CDATA[
   auth-path      = [ file-auth ] path-absolute
                  / [ file-auth ] file-absolute

   local-path     = [ drive-letter ] path-absolute
                  / file-absolute

   file-absolute  = "/" drive-letter path-absolute

   drive-letter   = ALPHA ":"
                  / ALPHA "|"
]]></artwork></figure>

<t>This is intended to support regular DOS or Windows file URIs with
vertical line characters in the drive letter construct.  E.g.:</t>

<t><list style="symbols">
  <t><spanx style="verb">file:///c|/path/to/file</spanx></t>
  <t><spanx style="verb">file:/c|/path/to/file</spanx></t>
  <t><spanx style="verb">file:c|/path/to/file</spanx></t>
</list></t>

<t>To update such an old URI, replace the vertical line “|” with a
colon “:”.</t>

</section>
</section>
<section anchor="ext-unc" title="UNC Strings">

<t>Some usages of the file URI scheme allow UNC filespace selector strings
to be translated to and from file URIs, either by mapping the
equivalent segments of the two schemes (hostname to authority,
sharename+objectnames to path), or by mapping the entire UNC string to
the path segment of a URI.</t>

<section anchor="ext-unc-map" title="file URI with Authority">

<t>The following is an algorithmic description of the process of
translating a UNC filespace selector string to a file URI by
mapping the equivalent segments of the two schemes:</t>

<t><list style="numbers">
  <t>Initialise the URI with the “file:” scheme identifier.</t>
  <t>Append the authority:  <list style="numbers">
      <t>Append the “//” authority sigil to the URI.</t>
      <t>Append the hostname field of the UNC string to the URI.</t>
    </list></t>
  <t>Append the sharename:  <list style="numbers">
      <t>Transform the sharename to a path segment (<xref target="RFC3986"/>,
Section 3.3) to conform to the encoding rules of Section 2 of
<xref target="RFC3986"/>.</t>
      <t>Append a delimiting slash character “/” and the transformed
segment to the URI.</t>
    </list></t>
  <t>For each objectname:  <list style="numbers">
      <t>Transform the objectname to a path segment as above.</t>
      <t>Append a delimiting slash character “/” and the transformed
segment to the URI.</t>
    </list></t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
   UNC String:   \\host.example.com\Share\path\to\file.txt
   URI:          file://host.example.com/Share/path/to/file.txt
]]></artwork></figure>

</section>
</section>
<section anchor="ext-unc-path" title="file URI with UNC Path">

<t>It is common to encounter file URIs that encode entire UNC strings in
the path, usually with all backslash “\” characters replaced with
slashes “/”.</t>

<t>To interpret such URIs, the <spanx style="verb">auth-path</spanx> rule in <xref target="syntax"/> can be
replaced with the following:</t>

<figure><artwork><![CDATA[
   auth-path      = [ file-auth ] path-absolute
                  / unc-authority path-absolute

   unc-authority  = 2*3"/" file-host

   file-host      = inline-IP / IPv4address / reg-name

   inline-IP      = "%5B" ( IPv6address / IPvFuture ) "%5D"
]]></artwork></figure>

<t>This syntax uses the <spanx style="verb">IPv4address</spanx>, <spanx style="verb">IPv6address</spanx>, <spanx style="verb">IPvFuture</spanx>,
and <spanx style="verb">reg-name</spanx> rules from <xref target="RFC3986"/>.</t>

<t><list style='empty'>
  <t>Note that the <spanx style="verb">file-host</spanx> rule is the same as <spanx style="verb">host</spanx> but with
percent-encoding applied to “[” and “]” characters.</t>
</list></t>

<t>This extended syntax is intended to support URIs that take the
following forms, in addition to those in <xref target="examples"/>:</t>

<t>Non-local files:</t>

<t><list style="symbols">
  <t>The representation of a non-local file, with an empty authority and a
complete (transformed) UNC string in the path.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file:////host.example.com/path/to/file</spanx></t>
    </list></t>
  <t>As above, with an extra slash between the empty authority and the
transformed UNC string, as per the syntax defined in <xref target="RFC1738"/>.
E.g.:  <list style="symbols">
      <t><spanx style="verb">file://///host.example.com/path/to/file</spanx></t>
    </list>
This representation is notably used by the Firefox web browser.
See Bugzilla#107540 <xref target="Bug107540"></xref>.</t>
</list></t>

<t>It also further limits the definitions of a “local file URI” by
excluding those with a path that encodes a UNC string.</t>

</section>
<section anchor="ext-backslash" title="Backslash as Separator">

<t>Historically some usages have copied entire file paths into the path
components of file URIs.  Where DOS or Windows file paths were thus
copied the resulting URI strings contained unencoded backslash “\”
characters, which are forbidden by both <xref target="RFC1738"/> and <xref target="RFC3986"/>.</t>

<t>It may be possible to translate or update such an invalid file URI by
replacing all backslashes “\” with slashes “/”, if it can be
determined with reasonable certainty that the backslashes are intended
as path separators.</t>

</section>
</section>
<section anchor="iri-vs-uri" title="Example of IRI vs Percent-Encoded URI">

<t>The following examples demonstrate the advantage of encoding file
URIs as IRIs to avoid ambiguity (see <xref target="encoding"/>).</t>

<t>Example: file IRI:</t>

<figure><artwork><![CDATA[
| Bytes of file IRI in a UTF-8 document:
|    66 69 6c 65 3a 43 3a 2f 72 65 c3 a7 75 2e 74 78 74
|    f  i  l  e  :  c  :  /  r  e  ( c ) u  .  t  x  t
|
| Interpretation:
|    A file named "recu.txt" with a cedilla on the "c", in the
|    directory "C:\" of a DOS or Windows file system.
|
| Character value sequences of file paths, for various file system
| encodings:
|
|  o UTF-16 (e.g. NTFS):
|       0043 003a 005c 0072 0065 00e7 0075 002e 0074 0078 0074
|
|  o Codepage 437 (e.g. MS-DOS):
|       43   3a   5c   72   65   87   75   2e   74   78   74
]]></artwork></figure>

<t>Counter-example: ambiguous file URI:</t>

<figure><artwork><![CDATA[
| Percent-encoded file URI, in any ASCII-compatible document:
|    "file:///%E3%81%A1"
|
| Possible interpretations of the file name, depending on the
| encoding of the file system:
|
|  o UTF-8:
|       <HIRAGANA LETTER TI (U+3061)>
|
|  o Codepage 437:
|       <GREEK SMALL LETTER PI (U+03C0)> +
|       <LATIN SMALL LETTER U WITH DIAERESIS (U+00FC)> +
|       <LATIN SMALL LETTER I WITH ACUTE (U+00ED)>
|
|  o EBCDIC:
|       "Ta~"
|
| etc.
]]></artwork></figure>

</section>
<section anchor="unc-syntax" title="UNC Syntax">

<t>The UNC filespace selector string is a null-terminated sequence of
characters from the Universal Character Set <xref target="ISO10646"/>.</t>

<t>The syntax of a UNC filespace selector string, as defined by
<xref target="MS-DTYP"/>, is given here in Augmented Backus-Naur Form (ABNF)
<xref target="RFC5234"/> for convenience.  Note that this definition is informative
only; the normative description is in <xref target="MS-DTYP"/>.</t>

<figure><artwork><![CDATA[
   UNC = "\\" hostname "\" sharename *( "\" objectname )
   hostname   = netbios-name / fqdn / ip-address
   sharename  = <name of share or resource to be accessed>
   objectname = <depends on resource being accessed>
]]></artwork></figure>

<t><list style="symbols">
  <t><spanx style="verb">netbios-name</spanx> from <xref target="MS-NBTE"/>, Section 2.2.1<!--http://msdn.microsoft.com/en-us/library/dd891456.aspx-->.</t>
  <t><spanx style="verb">fqdn</spanx> from <xref target="RFC1035"/> or <xref target="RFC1123"/></t>
  <t><spanx style="verb">ip-address</spanx> from Section 2.1 of <xref target="RFC1123"/>, or Section 2.2 of <xref target="RFC4291"/>.</t>
</list></t>

<t>The precise format of <spanx style="verb">sharename</spanx> depends on the protocol;
see: SMB <xref target="MS-SMB"/>, NFS <xref target="RFC7530"/>, NCP <xref target="NOVELL"/>.</t>

</section>
<section anchor="collected" title="Collected Rules">

<t>Here are the collected syntax rules for all optional appendices,
presented for convenience.  This collected syntax is not normative.</t>

<figure><artwork><![CDATA[
   file-URI       = file-scheme ":" file-hier-part

   file-scheme    = "file"

   file-hier-part = ( "//" auth-path )
                  / local-path

   auth-path      = [ file-auth ] path-absolute
                  / [ file-auth ] file-absolute
                  / unc-authority path-absolute

   local-path     = [ drive-letter ] path-absolute
                  / file-absolute

   file-auth      = "localhost"
                  / [ userinfo "@" ] host

   unc-authority  = 2*3"/" file-host

   file-host      = inline-IP / IPv4address / reg-name

   inline-IP      = "%5B" ( IPv6address / IPvFuture ) "%5D"

   file-absolute  = "/" drive-letter path-absolute

   drive-letter   = ALPHA ":"
                  / ALPHA "|"
]]></artwork></figure>

<t>This collected syntax is intended to support file URIs that take the
following forms:</t>

<t>Local files:</t>

<t><list style="symbols">
  <t>A traditional file URI for a local file, with an empty authority.
E.g.:  <list style="symbols">
      <t><spanx style="verb">file:///path/to/file</spanx></t>
    </list></t>
  <t>The minimal representation of a local file, with no authority
field and an absolute path that begins with a slash “/”.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file:/path/to/file</spanx></t>
    </list></t>
  <t>The minimal representation of a local file in a DOS- or
Windows-based environment, with no authority field and an
absolute path that begins with a drive letter.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file:c:/path/to/file</spanx></t>
    </list></t>
  <t>Regular DOS or Windows file URIs, with vertical line characters
in the drive letter construct.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file:///c|/path/to/file</spanx></t>
      <t><spanx style="verb">file:/c|/path/to/file</spanx></t>
      <t><spanx style="verb">file:c|/path/to/file</spanx></t>
    </list></t>
</list></t>

<t>Non-local files:</t>

<t><list style="symbols">
  <t>The representation of a non-local file, with an explicit authority.
E.g.:  <list style="symbols">
      <t><spanx style="verb">file://host.example.com/path/to/file</spanx></t>
    </list></t>
  <t>The “traditional” representation of a non-local file, with an
empty authority and a complete (transformed) UNC string in the
path.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file:////host.example.com/path/to/file</spanx></t>
    </list></t>
  <t>As above, with an extra slash between the empty authority and the
transformed UNC string.  E.g.:  <list style="symbols">
      <t><spanx style="verb">file://///host.example.com/path/to/file</spanx></t>
    </list></t>
</list></t>

</section>


  </back>
</rfc>

