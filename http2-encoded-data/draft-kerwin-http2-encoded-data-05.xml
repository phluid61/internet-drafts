<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.25 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-kerwin-http2-encoded-data-05" category="exp">

  <front>
    <title abbrev="http2-encoded-data">HTTP/2 Encoded Data</title>

    <author initials="M." surname="Kerwin" fullname="Matthew Kerwin">
      <organization></organization>
      <address>
        <email>matthew@kerwin.net.au</email>
        <uri>http://matthew.kerwin.net.au/</uri>
      </address>
    </author>

    <date year="2015"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document introduces new frame types for transporting gzip-encoded data between peers in the
Hypertext Transfer Protocol Version 2 (HTTP/2), and an associated error code for handling
invalid encoding.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>This document introduces a mechanism for applying encoding, particularly compression, to data
transported between two endpoints in version 2 of the Hypertext Transfer Protocol (HTTP/2),
analogous to Transfer-Encoding in HTTP/1.1 <xref target="RFC7230"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="additions" title="Additions to HTTP/2">

<t>This document introduces two new HTTP/2 frame types (<xref target="RFC7540"/>, Section 11.2)
and a new HTTP/2 error code (<xref target="RFC7540"/>, Section 7), to allow the compression
of data.</t>

<t>Note that while compressing some or all data in a stream might affect the total length of the
corresponding HTTP message body, the <spanx style="verb">content-length</spanx> header, if present, should continue to
reflect the total length of the <spanx style="emph">uncompressed</spanx> data. This is particularly relevant when detecting
malformed messages (<xref target="RFC7540"/>, Section 8.1.2.6).</t>

<section anchor="accept-gzipped-data" title="ACCEPT_GZIPPED_DATA">

<t>An ACCEPT_GZIPPED_DATA frame (type code=0xTBA) is used to indicate the sender’s ability and
willingness to receive GZIPPED_DATA frames.</t>

<t>ACCEPT_GZIPPED_DATA always applies to a connection, never a single stream. The stream identifier
for an ACCEPT_GZIPPED_DATA frame MUST be zero (0x0). If an endpoint receives an
ACCEPT_GZIPPED_DATA frame whose stream identifier field is anything other than 0x0, the endpoint
MUST respond with a connection error ((<xref target="RFC7540"/>, Section 5.4.1) of type
PROTOCOL_ERROR.</t>

<t>The payload length of an ACCEPT_GZIPPED_DATA frame MUST be zero. An endpoint that receives an
ACCEPT_GZIPPED_DATA frame a length other than zero MUST treat this as a
connection error (<xref target="RFC7540"/>, Section 5.4.1) of type PROTOCOL_ERROR.</t>

<t>The ACCEPT_GZIPPED_DATA frame defined the following flag:</t>

<t><list style="symbols">
  <t>DISABLE (0x1):
When set, bit 0 indicates that this endpoint is not willing or able to receive GZIPPED_DATA
frames.</t>
</list></t>

<t>An endpoint may advertise support for GZIPPED_DATA frames and later decide that it no longer
supports them.  After sending an ACCEPT_GZIPPED_DATA with the DISABLE flag set, the endpoint
SHOULD continue to accept GZIPPED_DATA frames for a reasonable amount of time to account for
frames that are already in flight.</t>

<t>The ACCEPT_GZIPPED_DATA frame is not subject to flow control.</t>

</section>
<section anchor="gzipped-data" title="GZIPPED_DATA">

<t>GZIPPED_DATA frames (type code=0xTBA) are semantically identical to DATA frames
(<xref target="RFC7540"/>, Section 6.1), but their payload is compressed.
Significantly, GZIPPED_DATA frames are subject to flow control (<xref target="RFC7540"/>,
Section 5.2).</t>

<t>Any compression or decompression context for a GZIPPED_DATA frame is unique to that frame.</t>

<figure title="GZIPPED_DATA Frame Payload"><artwork><![CDATA[
  +---------------+
  |Pad Length? (8)|
  +---------------+-----------------------------------------------+
  |                            Data (*)                         ...
  +---------------------------------------------------------------+
  |                           Padding (*)                       ...
  +---------------------------------------------------------------+
]]></artwork></figure>

<t>The GZIPPED_DATA frame contains the following fields:</t>

<t><list style="symbols">
  <t>Pad Length:
An 8-bit field containing the length of the frame padding in units
of octets. This field is optional and is only present if the
PADDED flag is set.</t>
  <t>Data:
Encoded application data. The amount of compressed data is the remainder of the frame
payload after subtracting the length of the other fields that are
present.</t>
  <t>Padding:
Padding octets that contain no application semantic value. Padding
octets MUST be set to zero when sending and ignored when receiving.</t>
</list></t>

<t>The GZIPPED_DATA frame defines the following flags:</t>

<t><list style="symbols">
  <t><spanx style="verb">END_STREAM</spanx> (0x1):
Bit 1 being set indicates that this frame is the last that the
endpoint will send for the identified stream. Setting this flag
causes the stream to enter one of the “half closed” states or the
“closed” state (<xref target="RFC7540"/>, Section 5.1).</t>
  <t><spanx style="verb">PADDED</spanx> (0x8):
Bit 4 being set indicates that the Pad Length field is present.</t>
</list></t>

<t>A GZIPPED_DATA frame MUST NOT be sent on a connection before receiving an
ACCEPT_GZIPPED_DATA frame.</t>

<t>An intermediary, on receiving a GZIPPED_DATA frame, MAY decode the data and forward it to its
downstream peer in one or more DATA frames. If the downstream peer has not advertised support
for GZIPPED_DATA frames (e.g. by sending an ACCEPT_GZIPPED_DATA frame) the
intermediary MUST decode the data before forwarding it.</t>

<t>If an endpoint detects that the payload of a GZIPPED_DATA frame is not encoded correctly,
for example with a mismatched checksum, the endpoint MUST
treat this as a stream error (see <xref target="RFC7540"/>, Section 5.4.2) of type
DATA_ENCODING_ERROR (<xref target="error"/>). The endpoint MAY then choose to immediately send an
ACCEPT_GZIPPED_DATA frame with the DISABLE flag set.</t>

<t>If an intermediary propagates a GZIPPED_DATA frame from the source peer to the destination peer
without modifying the payload or its encoding, and receives a DATA_ENCODING_ERROR from the
receiving peer, it SHOULD pass the error on to the source peer.</t>

<t>GZIPPED_DATA frames MUST be associated with a stream. If a GZIPPED_DATA frame is received whose
stream identifier field is 0x0, the recipient MUST respond with a connection error
(<xref target="RFC7540"/>, Section 5.4.1) of type PROTOCOL_ERROR.</t>

<t>GZIPPED_DATA frames are subject to flow control and can only be sent when a stream is in the
“open” or “half closed (remote)” states. The entire GZIPPED_DATA frame payload is included in flow
control, including the Pad Length and Padding fields if present. If a
GZIPPED_DATA frame is received whose stream is not in “open” or “half closed (local)” state, the
recipient MUST respond with a stream error (<xref target="RFC7540"/>, Section 5.4.2) of type
STREAM_CLOSED.</t>

<t>The total number of padding octets is determined by the value of the Pad Length field. If the
length of the padding is greater than the length of the remainder of the frame payload, the
recipient MUST treat this as a connection error (<xref target="RFC7540"/>, Section 5.4.1) of type
PROTOCOL_ERROR.</t>

<t>Note: A frame can be increased in size by one octet by including a Pad Length field
  with a value of zero.</t>

<t>Padding is a security feature; see Section 10.7 of <xref target="RFC7540"/>.</t>

</section>
<section anchor="error" title="DATA_ENCODING_ERROR">

<t>The following new error code is defined:</t>

<t><list style="symbols">
  <t><spanx style="verb">DATA_ENCODING_ERROR</spanx> (0xTBA):
The endpoint detected that its peer sent a GZIPPED_DATA frame with an invalid encoding.</t>
</list></t>

</section>
</section>
<section anchor="fragmentation" title="Fragmentation">

<t>Traversing a network segment with small frame size limits introduces the risk of fragmenting an
encoded stream. </t>

</section>
<section anchor="security" title="Security Considerations">

<t>Further to the Use of Compression in HTTP/2 (<xref target="RFC7540"/>, Section 10.6),
intermediaries MUST NOT apply compression to DATA frames, or alter the compression of
GZIPPED_DATA frames other than decompressing, unless additional information is available
that allows the intermediary to identify the source of data. In particular, frames that
are not compressed cannot be compressed, and frames that are separately compressed cannot
be merged into a single compressed frame.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>This document updates the registries for frame types and error codes in
the “Hypertext Transfer Protocol (HTTP) 2 Parameters” section.  This
document also establishes a new registry for HTTP/2 encoding scheme
codes.  This new registry is entered into the “Hypertext Transfer
Protocol (HTTP) 2 Parameters” section.</t>

<section anchor="http2-frame-type-registry-update" title="HTTP/2 Frame Type Registry Update">

<t>This document updates the “HTTP/2 Frame Type” registry
(<xref target="RFC7540"/>, Section 11.2).  The entries in the
following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Frame Type</ttcol>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Section</ttcol>
      <c>ACCEPT_GZIPPED_DATA</c>
      <c>TBD</c>
      <c><xref target="accept-gzipped-data"/></c>
      <c>GZIPPED_DATA</c>
      <c>TBD</c>
      <c><xref target="gzipped-data"/></c>
</texttable>

</section>
<section anchor="http2-error-code-registry-update" title="HTTP/2 Error Code Registry Update">

<t>This document updates the “HTTP/2 Error Code” registry
(<xref target="RFC7540"/>, Section 11.4).  The entries in the
following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>DATA_ENCODING_ERROR</c>
      <c>TBD</c>
      <c>Invalid encoding detected</c>
      <c><xref target="error"/></c>
</texttable>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to Keith Morgan for his advice, input, and editorial contributions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17970' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>



<reference anchor='RFC7540'>

<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'>
<organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'>
<organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson'>
<organization /></author>
<date year='2015' month='May' />
<abstract>
<t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients.&lt;/t>&lt;t> This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax. HTTP's existing semantics remain unchanged.</t></abstract></front>

<seriesInfo name='RFC' value='7540' />
<format type='TXT' octets='209580' target='http://www.rfc-editor.org/rfc/rfc7540.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC7230'>

<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding'>
<organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke'>
<organization /></author>
<date year='2014' month='June' />
<abstract>
<t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract></front>

<seriesInfo name='RFC' value='7230' />
<format type='TXT' octets='205947' target='http://www.rfc-editor.org/rfc/rfc7230.txt' />
</reference>




    </references>



  </back>
</rfc>

