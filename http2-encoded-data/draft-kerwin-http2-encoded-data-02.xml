<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<rfc ipr="trust200902" docName="draft-kerwin-http2-encoded-data-02" category="std">

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

  <front>
    <title abbrev="http2-encoded-data">HTTP/2 Encoded Data</title>

    <author initials="M." surname="Kerwin" fullname="Matthew Kerwin">
      <organization></organization>
      <address>
        <email>matthew@kerwin.net.au</email>
        <uri>http://matthew.kerwin.net.au/</uri>
      </address>
    </author>

    <date year="2014"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document introduces new frame types for transporting encoded data in HTTP/2, and an
associated error code.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>This document introduces a mechanism for applying encoding, particularly compression, to data
transported between two HTTP/2 endpoints, analogous to Transfer-Encoding in HTTP/1.1 <xref target="RFC7230"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="additions" title="Additions to HTTP/2">

<t>This document introduces two new HTTP/2 frame types (<xref target="I-D.ietf-httpbis-http2"/>, Section 11.2),
and a new HTTP/2 error code (<xref target="I-D.ietf-httpbis-http2"/>, Section 7).</t>

<t>Note that while encoding some or all data in a stream might affect the total length of the
corresponding HTTP message body, the <spanx style="verb">content-length</spanx> header, if present, should continue to
reflect the total length of the <spanx style="emph">unencoded</spanx> data. This is particularly relevant when detecting
malformed messages (<xref target="I-D.ietf-httpbis-http2"/>, Section 8.1.2.5).</t>

<section anchor="accept-encoded-data" title="ACCEPT_ENCODED_DATA">

<t>An <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame (type code=0xTBA) is used to indicate the sender’s ability and
willingness to receive <spanx style="verb">ENCODED_DATA</spanx> frames that are encoded using the schemes identified in
its payload.</t>

<t>The payload length of an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame MUST be an exact multiple of 16 bits (2 bytes).
An endpoint that receives an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame with an odd length MUST treat this as a
connection error (<xref target="I-D.ietf-httpbis-http2"/>, Section 5.4.1) of type <spanx style="verb">PROTOCOL_ERROR</spanx>.</t>

<figure title="ACCEPT_ENCODED_DATA Frame Payload"><artwork><![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | Encoding (8)  |   Rank (8)    | ...
  +---------------+---------------+-------------------------------+
]]></artwork></figure>

<t>The <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame contains zero or more tuples comprising the following fields:</t>

<t><list style="symbols">
  <t>Encoding:
An 8-bit identifier which identifies the encoding being advertised (see <xref target="schemes"/>).</t>
  <t>Rank:
An 8-bit integer value.</t>
</list></t>

<t>The rank fulfils the same role as in the HTTP/1.1 TE header (<xref target="RFC7230"/>, Section 4.3). The
rank value is an integer in the range 0 through 255, where 1 is the least preferred and 255
is the most preferred; a value of 0 means “not acceptable”.</t>

<t>An endpoint that receives an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame containing an {encoding,rank} tuple
with an unknown or unsupported encoding identifier MUST ignore that tuple.</t>

<t>Each <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame fully replaces the set of tuples sent in a previous frame;
if an encoding identifier is omitted from a subsequent <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame it is deemed
“not acceptable”.</t>

<t>An endpoint may advertise support for an encoding scheme and later decide that it no longer
supports that scheme.  After sending an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> that omits the encoding identifier
in question, or includes it with a rank of 0, the endpoint SHOULD continue to accept
<spanx style="verb">ENCODED_DATA</spanx> frames using that scheme for a reasonable amount of time to account for encoded
frames that are already in flight.</t>

<t>The <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame does not define any flags, and is not subject to flow control.</t>

</section>
<section anchor="encoded-data" title="ENCODED_DATA">

<t><spanx style="verb">ENCODED_DATA</spanx> frames (type code=0xTBA) are semantically identical to <spanx style="verb">DATA</spanx> frames
(<xref target="I-D.ietf-httpbis-http2"/>, Section 6.1), but have an encoding applied to their payload.
Significantly, <spanx style="verb">ENCODED_DATA</spanx> frames are subject to flow control (<xref target="I-D.ietf-httpbis-http2"/>,
Section 5.2).</t>

<t>Any encoding or decoding context for an <spanx style="verb">ENCODED_DATA</spanx> frame is unique to that frame.</t>

<figure title="ENCODED_DATA Frame Payload"><artwork><![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |Pad Length? (8)|
  +---------------+
  | Encoding (8)  |
  +---------------+-----------------------------------------------+
  |                            Data (*)                         ...
  +---------------------------------------------------------------+
  |                           Padding (*)                       ...
  +---------------------------------------------------------------+
]]></artwork></figure>

<t>The <spanx style="verb">ENCODED_DATA</spanx> frame contains the following fields:</t>

<t><list style="symbols">
  <t>Pad Length:
An 8-bit field containing the length of the frame padding in units
of octets. This field is optional and is only present if the
PADDED flag is set.</t>
  <t>Encoding:
An 8-bit identifier which identifies the encoding that has been
applied to the Data field (see <xref target="schemes"/>).</t>
  <t>Data:
Encoded application data. The amount of encoded data is the remainder of the frame
payload after subtracting the length of the other fields that are
present.</t>
  <t>Padding:
Padding octets that contain no application semantic value. Padding
octets MUST be set to zero when sending and ignored when receiving.</t>
</list></t>

<t>The <spanx style="verb">ENCODED_DATA</spanx> frame defines the following flags:</t>

<t><list style="symbols">
  <t><spanx style="verb">END_STREAM</spanx> (0x1):
Bit 1 being set indicates that this frame is the last that the
endpoint will send for the identified stream. Setting this flag
causes the stream to enter one of the “half closed” states or the
“closed” state (<xref target="I-D.ietf-httpbis-http2"/>, Section 5.1).</t>
  <t><spanx style="verb">END_SEGMENT</spanx> (0x2):
Bit 2 being set indicates that this frame is the last for the
current segment. Intermediaries MUST NOT coalesce frames across a
segment boundary and MUST preserve segment boundaries when
forwarding frames.</t>
  <t><spanx style="verb">PADDED</spanx> (0x8):
Bit 4 being set indicates that the Pad Length field is present.</t>
</list></t>

<t>On receiving an <spanx style="verb">ENCODED_DATA</spanx> frame, an intermediary MAY decode the data and forward it in one or
more <spanx style="verb">DATA</spanx> frames. If the downstream peer does not support the encoding scheme used in the
received frame, as advertised in an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame, the intermediary MUST
decode the data and either: forward it in one or more DATA frames, or encode it with a scheme
supported by the downstream peer and forward it in one or more <spanx style="verb">ENCODED_DATA</spanx> frames.</t>

<t>An <spanx style="verb">ENCODED_DATA</spanx> frame MUST NOT be sent on a connection before receiving an <spanx style="verb">ACCEPT_ENCODED_DATA</spanx>
frame. A sender MUST NOT apply an encoding that has not first been advertised by the peer in an
<spanx style="verb">ACCEPT_ENCODED_DATA</spanx> frame, or was advertised with a rank of 0. Endpoints that receive a frame
with an encoding they do not recognise or support MUST treat this as a connection error of type
<spanx style="verb">PROTOCOL_ERROR</spanx>.</t>

<t>If an endpoint detects that the payload of an <spanx style="verb">ENCODED_DATA</spanx> frame is incorrectly encoded it MUST
treat this as a stream error (see <xref target="I-D.ietf-httpbis-http2"/>, Section 5.4.2) of type
<spanx style="verb">DATA_ENCODING_ERROR</spanx> (<xref target="error"/>).</t>

<t><spanx style="verb">ENCODED_DATA</spanx> frames are subject to flow control and can only be sent when a stream is in the
“open” or “half closed (remote)” states. The entire <spanx style="verb">ENCODED_DATA</spanx> frame payload is included in
flow control, including the encoded data, and Pad Length and Padding fields if present. If an
<spanx style="verb">ENCODED_DATA</spanx> frame is received whose stream is not in “open” or “half closed (local)” state, the
recipient MUST respond with a stream error (<xref target="I-D.ietf-httpbis-http2"/>, Section 5.4.2) of type
STREAM_CLOSED.</t>

</section>
<section anchor="error" title="DATA_ENCODING_ERROR">

<t>The following new error code is defined:</t>

<t><list style="symbols">
  <t>DATA_ENCODING_ERROR (0xTBA):
The endpoint detected that its peer sent an <spanx style="verb">ENCODED_DATA</spanx> frame with an invalid encoding.</t>
</list></t>

</section>
</section>
<section anchor="schemes" title="Encoding Schemes">

<t>The following encoding schemes are defined:</t>

<t><list style="symbols">
  <t><spanx style="verb">ENCODING_COMPRESS</spanx> (1):
The “compress” coding is an adaptive Lempel-Ziv-Welch (LZW) coding
<xref target="Welch"/> that is commonly produced by the UNIX file compression program
“compress”.</t>
  <t><spanx style="verb">ENCODING_ZLIB</spanx> (2):
The zlib” coding is a “zlib” data format <xref target="RFC1950"/> containing
a “deflate” compressed data stream <xref target="RFC1951"/> that uses a
combination of the Lempel-Ziv (LZ77) compression algorithm and
Huffman coding.</t>
  <t><spanx style="verb">ENCODING_GZIP</spanx> (3):
The “gzip” coding is an LZ77 coding with a 32 bit CRC that is
commonly produced by the gzip file compression program <xref target="RFC1952"/>.</t>
</list></t>

<!--
* compress is obsolete(?)
* LZ4 ?
* LZMA ? (i.e. 7z)
-->

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Further to the Use of Compression in HTTP/2 (<xref target="I-D.ietf-httpbis-http2"/>, Section 10.6),
intermediaries MUST NOT apply compression to DATA frames, or alter the compression of
<spanx style="verb">ENCODED_DATA</spanx> frames, other than decompressing, unless additional information is available
that allows the intermediary to identify the source of data. In particular, frames that
are not compressed cannot be compressed, and frames that are separately compressed cannot
be merged into a single compressed frame.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document updates the registries for frame types and error codes in
the “Hypertext Transfer Protocol (HTTP) 2 Parameters” section.  This
document also establishes a new registry for HTTP/2 encoding scheme
codes.  This new registry is entered into the “Hypertext Transfer
Protocol (HTTP) 2 Parameters” section. </t>

<section anchor="http2-frame-type-registry-update" title="HTTP/2 Frame Type Registry Update">

<t>This document updates the “HTTP/2 Frame Type” registry
(<xref target="I-D.ietf-httpbis-http2"/>, Section 11.2).  The entries in the
following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Frame Type</ttcol>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Section</ttcol>
      <c>ACCEPT_ENCODED_DATA</c>
      <c>TBD</c>
      <c><xref target="accept-encoded-data"/></c>
      <c>ENCODED_DATA</c>
      <c>TBD</c>
      <c><xref target="encoded-data"/></c>
</texttable>

</section>
<section anchor="http2-error-code-registry-update" title="HTTP/2 Error Code Registry Update">

<t>This document updates the “HTTP/2 Error Code” registry
(<xref target="I-D.ietf-httpbis-http2"/>, Section 11.4).  The entries in the
following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>DATA_ENCODING_ERROR</c>
      <c>TBD</c>
      <c>Invalid encoding detected</c>
      <c><xref target="error"/></c>
</texttable>

</section>
<section anchor="http2-encoding-schemes-registry" title="HTTP/2 Encoding Schemes Registry">

<t>This document establishes a registry for encoding scheme codes. The
“HTTP/2 Encoding Schemes” registry manages an 8-bit space. The “HTTP/2
Encoding Schemes” registry operates under either of the “IETF Review”
or “IESG Approval” policies <xref target="RFC5226"/> for values between 0x00 and
0xef, with values between 0xf0 and 0xff being reserved for
experimental use.</t>

<t>New entries in this registry require the following information:</t>

<t><list style="symbols">
  <t>Frame Type:
A name or label for the encoding scheme.</t>
  <t>Code:
The 8-bit code assigned to the encoding scheme.</t>
  <t>Specification:
A reference to a specification that includes a description of the
encoding scheme.</t>
</list></t>

<t>An initial set of encoding scheme code registrations can be found
in <xref target="schemes"/>.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to Keith Morgan for his advice, input, and editorial contributions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17970' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>



<reference anchor='I-D.ietf-httpbis-http2'>
<front>
<title>Hypertext Transfer Protocol version 2</title>

<author initials='M' surname='Belshe' fullname='Mike Belshe'>
    <organization />
</author>

<author initials='R' surname='Peon' fullname='Roberto Peon'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='June' day='17' year='2014' />

<abstract><t>This specification describes an optimized expression of the syntax of the Hypertext Transfer Protocol (HTTP).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent messages on the same connection.  It also introduces unsolicited push of representations from servers to clients.  This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-http2-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-http2-13.txt' />
</reference>


<reference anchor="Welch" >
  <front>
    <title>A Technique for High-Performance Data Compression</title>
    <author initials="T.A." surname="Welch" fullname="Terry A. Welch">
      <organization></organization>
    </author>
    <date year="1984" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="Computer 17(6)"/>
</reference>




<reference anchor='RFC1950'>

<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='L.P.' surname='Deutsch' fullname='L. Peter Deutsch'>
<organization>Aladdin Enterprises</organization>
<address>
<postal>
<street>203 Santa Margarita Ave.</street>
<city>Menlo Park</city>
<region>CA</region>
<code>94025</code>
<country>US</country></postal>
<phone>+1 415 322 0103</phone>
<facsimile>+1 415 322 1734</facsimile>
<email>ghost@aladdin.com</email></address></author>
<author initials='J-L.' surname='Gailly' fullname='Jean-Loup Gailly'>
<organization /></author>
<date year='1996' month='May' />
<abstract>
<t>This specification defines a lossless compressed data format.  The data can be produced or consumed, even for an arbitrarily long sequentially presented input data stream, using only an a priori bounded amount of intermediate storage.  The format presently uses the DEFLATE compression method but can be easily extended to use
   other compression methods.  It can be implemented readily in a manner not covered by patents.  This specification also defines the ADLER-32 checksum (an extension and improvement of the Fletcher checksum), used for detection of data corruption, and provides an algorithm for computing it.</t></abstract></front>

<seriesInfo name='RFC' value='1950' />
<format type='TXT' octets='20502' target='http://www.rfc-editor.org/rfc/rfc1950.txt' />
<format type='PS' octets='37768' target='http://www.rfc-editor.org/rfc/rfc1950.ps' />
<format type='PDF' octets='36393' target='http://www.rfc-editor.org/rfc/rfc1950.pdf' />
</reference>



<reference anchor='RFC1951'>

<front>
<title>DEFLATE Compressed Data Format Specification version 1.3</title>
<author initials='P.' surname='Deutsch' fullname='L. Peter Deutsch'>
<organization>Aladdin Enterprises</organization>
<address>
<postal>
<street>203 Santa Margarita Ave.</street>
<city>Menlo Park</city>
<region>CA</region>
<code>94025</code>
<country>US</country></postal>
<phone>+1 415 322 0103</phone>
<facsimile>+1 415 322 1734</facsimile>
<email>ghost@aladdin.com</email></address></author>
<date year='1996' month='May' />
<abstract>
<t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.  The data can be produced or consumed, even for an arbitrarily long sequentially presented input data stream, using only an a priori bounded amount of intermediate storage.  The format can be implemented readily in a manner not covered by patents.</t></abstract></front>

<seriesInfo name='RFC' value='1951' />
<format type='TXT' octets='36944' target='http://www.rfc-editor.org/rfc/rfc1951.txt' />
<format type='PS' octets='57408' target='http://www.rfc-editor.org/rfc/rfc1951.ps' />
<format type='PDF' octets='56620' target='http://www.rfc-editor.org/rfc/rfc1951.pdf' />
</reference>



<reference anchor='RFC1952'>

<front>
<title>GZIP file format specification version 4.3</title>
<author initials='P.' surname='Deutsch' fullname='L. Peter Deutsch'>
<organization>Aladdin Enterprises</organization>
<address>
<postal>
<street>203 Santa Margarita Ave.</street>
<city>Menlo Park</city>
<region>CA</region>
<code>94025</code>
<country>US</country></postal>
<phone>+1 415 322 0103</phone>
<facsimile>+1 415 322 1734</facsimile>
<email>ghost@aladdin.com</email></address></author>
<author initials='J-L.' surname='Gailly' fullname='Jean-Loup Gailly'>
<organization />
<address>
<email>gzip@prep.ai.mit.edu</email></address></author>
<author initials='M.' surname='Adler' fullname='Mark Adler'>
<organization />
<address>
<email>madler@alumni.caltech.edu</email></address></author>
<author initials='L.P.' surname='Deutsch' fullname='L. Peter Deutsch'>
<organization />
<address>
<email>ghost@aladdin.com</email></address></author>
<author initials='G.' surname='Randers-Pehrson' fullname='Glenn Randers-Pehrson'>
<organization />
<address>
<email>randeg@alumni.rpi.edu</email></address></author>
<date year='1996' month='May' />
<abstract>
<t>This specification defines a lossless compressed data format that is compatible with the widely used GZIP utility.  The format includes a cyclic redundancy check value for detecting data corruption.  The format presently uses the DEFLATE method of compression but can be easily extended to use other compression methods.  The format can be implemented readily in a manner not covered by patents.</t></abstract></front>

<seriesInfo name='RFC' value='1952' />
<format type='TXT' octets='25036' target='http://www.rfc-editor.org/rfc/rfc1952.txt' />
<format type='PS' octets='43337' target='http://www.rfc-editor.org/rfc/rfc1952.ps' />
<format type='PDF' octets='43211' target='http://www.rfc-editor.org/rfc/rfc1952.pdf' />
</reference>



<reference anchor='RFC5226'>

<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t>&lt;t> In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t>&lt;t> This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>

<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />
<format type='TXT' octets='66160' target='http://www.rfc-editor.org/rfc/rfc5226.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC7230'>

<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding'>
<organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke'>
<organization /></author>
<date year='2014' month='June' />
<abstract>
<t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract></front>

<seriesInfo name='RFC' value='7230' />
<format type='TXT' octets='205947' target='http://www.rfc-editor.org/rfc/rfc7230.txt' />
</reference>




    </references>



  </back>
</rfc>

